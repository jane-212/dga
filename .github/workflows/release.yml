name: release

on:
  push:
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

permissions:
  contents: write

jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get the release version from the tag
        if: env.VERSION == ''
        run: echo "VERSION=${{ github.ref_name }}" >> $GITHUB_ENV
      - name: Show the version
        run: |
          echo "version is: $VERSION"
      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create $VERSION --draft --generate-notes --verify-tag --title $VERSION
    outputs:
      version: ${{ env.VERSION }}

  build-release:
    name: build-release
    needs: ["create-release"]
    runs-on: ${{ matrix.os }}
    env:
      RUST_BACKTRACE: 1
    strategy:
      fail-fast: false
      matrix:
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu

          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin

          - build: windows
            os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}

      - name: Set target variables
        shell: bash
        run: |
          echo "TARGET_FLAGS=${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        shell: bash
        run: |
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Setup just
        uses: extractions/setup-just@v2

      - name: Install dependencies
        shell: bash
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get install -y libgtk-3-dev
          sudo apt-get install -y libsoup-3.0-dev
          sudo apt-get install -y javascriptcoregtk-4.1-dev
          sudo apt-get install -y webkit2gtk-4.1-dev

      - name: Build release binary
        shell: bash
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            just build-windows ${{ env.TARGET_FLAGS }}
            bin="target/${{ matrix.target }}/release/bundle/msi/Dga.msi"
            name="windows"
          elif [ "${{ matrix.os }}" = "macos-latest" ]; then
            just build ${{ env.TARGET_FLAGS }}
            bin="target/${{ matrix.target }}/release/bundle/osx/Dga.app"
            name="macos"
          else
            just build ${{ env.TARGET_FLAGS }}
            bin="target/${{ matrix.target }}/release/bundle/linux/Dga"
            name="linux"
          fi
          echo "BIN=$bin" >> $GITHUB_ENV
          echo "ARCHIVE=$name" >> $GITHUB_ENV
        env:
          VERSION: ${{ needs.create-release.outputs.version }}

      - name: Creating directory for archive
        shell: bash
        run: |
          mkdir -p "$ARCHIVE"
          cp -r "$BIN" "$ARCHIVE"/
          cp LICENSE "$ARCHIVE"/

      - name: Build archive (Windows)
        shell: bash
        if: matrix.os == 'windows-latest'
        run: |
          7z a "$ARCHIVE.zip" "$ARCHIVE"
          echo "ASSET=$ARCHIVE.zip" >> $GITHUB_ENV

      - name: Build archive (Unix)
        shell: bash
        if: matrix.os != 'windows-latest'
        run: |
          tar czf "$ARCHIVE.tar.gz" "$ARCHIVE"
          echo "ASSET=$ARCHIVE.tar.gz" >> $GITHUB_ENV

      - name: Upload release archive
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: |
          version="${{ needs.create-release.outputs.version }}"
          gh release upload "$version" ${{ env.ASSET }}
